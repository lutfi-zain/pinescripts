// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © 0xBujang
// This code is originally authored by QuantAlgo

//@version=6
strategy(title="0xBujang - Ichimoku Sokudō For Loop", overlay=true, default_qty_type = strategy.percent_of_equity, default_qty_value = 99 , initial_capital = 10000)

//              ╔════════════════════════════════╗              //
//              ║      USER-DEFINED SETTINGS     ║              //
//              ╚════════════════════════════════╝              //

// Input Groups
var string zlag_settings    = "════════ Zero Lag Settings ════════"
var string loop_settings    = "════════ For Loop Settings ════════"
var string thresh_settings  = "════════ Threshold Settings ════════"
var string visual_settings  = "════════ Visualization Settings ════════"
var string strategy_settings  = "════════ Strategy Settings ════════"

// Tooltips
tooltip_zl_length     = "Length of the Zero Lag calculation period. Higher values create smoother signals."
tooltip_vol_mult      = "Multiplier for volatility in signal generation. Higher values make signals more conservative by requiring larger price movements."
tooltip_loop_start    = "Starting point for the loop analysis. Lower values analyze more recent price action."
tooltip_loop_end      = "Ending point for the loop analysis. Higher values analyze longer historical periods."
tooltip_thresh_up     = "Minimum score required to generate uptrend signals. Higher values create stricter conditions."
tooltip_thresh_down   = "Maximum score required to generate downtrend signals. Lower values create stricter conditions."
tooltip_signals       = "Enable/disable signal markers on the chart"
tooltip_candles       = "Enable/disable candle coloring based on trend direction"
tooltip_bg_lines      = "Enable/disable vertical lines on signal changes"

// Zero Lag Settings
length = input.int(50, "Zero Lag Length", 
     minval=1, 
     group=zlag_settings, 
     tooltip=tooltip_zl_length)
volatility_mult = input.float(0.9, "Volatility Multiplier", 
     minval=0.1, 
     group=zlag_settings, 
     tooltip=tooltip_vol_mult)

// Loop Settings
loop_start = input.int(1, "Loop Start", 
     minval=1, 
     group=loop_settings, 
     tooltip=tooltip_loop_start)
loop_end = input.int(70, "Loop End", 
     minval=1, 
     group=loop_settings, 
     tooltip=tooltip_loop_end)

// Threshold Settings
threshold_up = input.int(1, "Threshold Uptrend", 
     group=thresh_settings, 
     tooltip=tooltip_thresh_up)
threshold_down = input.int(-1, "Threshold Downtrend", 
     group=thresh_settings, 
     tooltip=tooltip_thresh_down)

// Visualization Settings
bullcolor = input.color(#ffdbac, "Bullish Color", group=visual_settings)
bearcolor = input.color(#96a4d3, "Bearish Color", group=visual_settings)
show_signals = input.bool(true, "Show Signal Markers", 
     group=visual_settings, tooltip=tooltip_signals)
paint_candles = input.bool(true, "Color Candles", 
     group=visual_settings, tooltip=tooltip_candles)
show_bg_lines = input.bool(false, "Signal Change Lines", 
     group=visual_settings, tooltip=tooltip_bg_lines)

// Strategy Settings
show_long   = input.bool(true,"Long Signal", group = strategy_settings)
show_short   = input.bool(false,"Short Signal", group = strategy_settings)
limit_backtest_time = input.bool(true,"Limit Backtest Time", group = strategy_settings)
backtest_start_at = input.time(defval = timestamp('01 Jan 2018 00:00 +0700'), title="Backtest Start At", group = strategy_settings)

// Ichimoku Input
show_ichimoku = input(false, title="Show Ichimoku Cloud")
ichimoku_sukudo = input(false, title="Activate Ichimoku Sukudo")
conversionPeriods = input.int(9, minval=1, title="Conversion Line Length")
basePeriods = input.int(26, minval=1, title="Base Line Length")
laggingSpan2Periods = input.int(52, minval=1, title="Leading Span B Length")
displacement = input.int(26, minval=1, title="Lagging Span")
donchian(len) => math.avg(ta.lowest(len), ta.highest(len))
conversionLine = donchian(conversionPeriods)
baseLine = donchian(basePeriods)
leadLine1 = math.avg(conversionLine, baseLine)
leadLine2 = donchian(laggingSpan2Periods)

//              ╔════════════════════════════════╗              //
//              ║      ZERO LAG CALCULATIONS     ║              //
//              ╚════════════════════════════════╝              //

lag = math.floor((length - 1) / 2)
zl_basis = ta.ema(close + (close - close[lag]), length)
volatility = ta.highest(ta.atr(length), length*3) * volatility_mult

//              ╔════════════════════════════════╗              //
//              ║        FOR LOOP ANALYSIS       ║              //
//              ╚════════════════════════════════╝              //

forloop_analysis(basis_price) =>
    sum = 0.0
    for i = loop_start to loop_end by 1
        sum += (basis_price > basis_price[i] ? 1 : -1)
    sum

score = forloop_analysis(zl_basis)

//              ╔════════════════════════════════╗              //
//              ║        SIGNAL GENERATION       ║              //
//              ╚════════════════════════════════╝              //

// Long/Short conditions
long_signal = score > threshold_up and close > zl_basis + volatility
short_signal = score < threshold_down and close < zl_basis - volatility

// Trend detection
var trend = 0
if long_signal
    trend := 1
else if short_signal
    trend := -1

// Track trend changes
var prev_trend = 0
trend_changed = trend != prev_trend
prev_trend := trend

longCondition = (trend_changed and trend == 1) and (limit_backtest_time ? time > backtest_start_at : true)
shortCondition = (trend_changed and trend == -1) and (limit_backtest_time ? time > backtest_start_at : true)

// close Ichimoku

currentSSA = leadLine1[26]
currentSSB = leadLine2[26]

kumoHigh = math.max(currentSSA, currentSSB)
kumoLow  = math.min(currentSSA, currentSSB)

bodyLow  = math.min(open, close)
bodyHigh = math.max(open, close)

// 🟢/🔴 Kumo "Color" logic (SSA above SSB is green, otherwise red)
is_current_kumo_green = currentSSA > currentSSB
is_current_kumo_red   = currentSSA < currentSSB

is_kumo_green = leadLine1 > leadLine2  // 26 bars ahead
is_kumo_red   = leadLine1 < leadLine2

// ✅ Body positions relative to current Kumo (SSA & SSB from 26 bars ago)
is_whole_body_inside_current_kumo = bodyLow >= kumoLow and bodyHigh <= kumoHigh
is_whole_body_above_current_kumo  = bodyLow > kumoHigh
is_whole_body_under_current_kumo  = bodyHigh <= kumoLow

// ✅ Tenkan-sen x Kijun-sen
is_tk_above_kj =  baseLine > conversionLine
is_whole_body_under_tkkj = open <= math.min(conversionLine,baseLine) and close < math.min(conversionLine,baseLine)

//              ╔════════════════════════════════╗              //
//              ║         VISUALIZATION          ║              //
//              ╚════════════════════════════════╝              //

// Current trend color
trend_col = trend == 1 ? bullcolor : trend == -1 ? bearcolor : na

// Plot Zero Lag line
p_basis = plot(zl_basis, "Zero Lag Basis", color=trend_col, linewidth=3)
p_price = plot(hl2, "Price", display=display.none, editable=false)

// Fill between Zero Lag and price
fill(p_basis, p_price, hl2, zl_basis, na, color.new(trend_col, 20))

// Plot trend shift labels
plotshape(longCondition ? zl_basis : na, "Bullish Trend", 
     shape.labelup, location.absolute, bullcolor, 
     text="𝑳", textcolor=#000000, size=size.small, force_overlay=true)

plotshape(shortCondition ? zl_basis : na, "Bearish Trend", 
     shape.labeldown, location.absolute, bearcolor, 
     text="𝑺", textcolor=#ffffff, size=size.small, force_overlay=true)

// Background signal lines
bgcolor(show_bg_lines ? 
     (ta.crossover(trend, 0) ? bullcolor : 
      ta.crossunder(trend, 0) ? bearcolor : na) : na)

// Color candles based on trend
barcolor(paint_candles ? 
     (trend == 1 ? bullcolor : 
      trend == -1 ? bearcolor : na) : na)

// Ichimoku
plot(show_ichimoku ? conversionLine : na, color=#2962FF, title="Conversion Line")
plot(show_ichimoku ? baseLine : na, color=#B71C1C, title="Base Line")
plot(show_ichimoku ? close : na, offset = -displacement + 1, color=#43A047, title="Lagging Span")
p1 = plot(show_ichimoku ? leadLine1 : na, offset = displacement - 1, color=#A5D6A7,title="Leading Span A")
p2 = plot(show_ichimoku ? leadLine2 : na , offset = displacement - 1, color=#EF9A9A,title="Leading Span B")
plot(show_ichimoku ? (leadLine1 > leadLine2 ? leadLine1 : leadLine2) : na, offset = displacement - 1, title = "Kumo Cloud Upper Line", display = display.none) 
plot(show_ichimoku ? (leadLine1 < leadLine2 ? leadLine1 : leadLine2) : na, offset = displacement - 1, title = "Kumo Cloud Lower Line", display = display.none) 
fill(p1, p2, color = leadLine1 > leadLine2 ? color.rgb(67, 160, 71, 90) : color.rgb(244, 67, 54, 90))

//              ╔════════════════════════════════╗              //
//              ║             ALERTS             ║              //
//              ╚════════════════════════════════╝              //

alertcondition(ta.crossover(trend, 0),
     title="Zero Lag Signals Long",
     message="Zero Lag Signals Long {{exchange}}:{{ticker}}")

alertcondition(ta.crossunder(trend, 0),
     title="Zero Lag Signals Short",
     message="Zero Lag Signals Short {{exchange}}:{{ticker}}")

//              ╔════════════════════════════════╗              //
//              ║             STRATEGY           ║              //
//              ╚════════════════════════════════╝              //

if longCondition
    if show_long
        strategy.entry("Long", strategy.long)
    if show_short
        strategy.close("Short")

if ichimoku_sukudo and is_kumo_red and is_whole_body_under_current_kumo and is_whole_body_under_tkkj and is_tk_above_kj
    if show_long
        strategy.close("Long")

if shortCondition
    if show_long 
        if ichimoku_sukudo 
            if is_current_kumo_green and is_whole_body_under_current_kumo
                strategy.close("Long")
        else 
            strategy.close("Long")

    if show_short
        strategy.entry("Short", strategy.short)